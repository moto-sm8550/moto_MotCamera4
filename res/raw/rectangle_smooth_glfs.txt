precision mediump float;
varying vec2 v_Position;
uniform vec4 u_Color;
uniform float u_Opacity;
uniform float u_Radius;
uniform float u_LineWidth;
uniform vec2 u_Size;
uniform vec4 u_ColorBackground;
uniform int u_AlphaChange;

float udRoundRect(vec2 p, vec2 b, float r)
{
    return length(max(abs(p) - b, 0.0)) - r;
}

void main() {
    vec2 pos = v_Position;
    float rad = u_Radius;
    vec4 v_Color = u_Color;

    if (u_LineWidth > 0.001 && u_Radius < 0.001) {
        vec2 size = u_Size - u_LineWidth/2.0;
        if (abs(pos.x) >= size.x || abs(pos.y) >= size.y) {
            gl_FragColor = v_Color * u_Opacity;
        } else {
            gl_FragColor = u_ColorBackground * u_ColorBackground.a * u_Opacity;
        }
    } else {
        float line = u_LineWidth;
        vec2 size = u_Size ;//- 2.0;
        float alpha = 0.0;

        float dis = udRoundRect(pos, size - rad, rad);
        if (u_LineWidth >= 0.001 && dis <= -line) {
            alpha = clamp(abs(dis + line), 0.0, 1.0);//stroke
            gl_FragColor = mix(v_Color * v_Color.a * u_Opacity,
                    u_ColorBackground * u_ColorBackground.a * u_Opacity, alpha);
        } else {
            alpha = clamp(dis, 0.0, 1.0);//solid
            if(u_AlphaChange == 1){
               gl_FragColor = mix(v_Color *  u_Opacity, vec4(0.0, 0.0, 0.0, 0.0), alpha);
            } else{
               gl_FragColor = mix(v_Color * v_Color.a * u_Opacity, vec4(0.0, 0.0, 0.0, 0.0), alpha);
            }
        }
    }
}
